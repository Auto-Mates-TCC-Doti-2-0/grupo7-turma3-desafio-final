pipeline {
    agent any
    parameters {
        password(name: 'DB_PASSWORD', defaultValue: '', description: 'Senha do database')  
        string(name: 'SQL_DEV', defaultValue: '', description: 'IP do database de DEV')
    }

    stages {
        stage('Git Checkout') {
            steps {
                git credentialsId: 'git-ssh-private-key',
                    url: 'git@github.com:Auto-Mates-TCC-Doti-2-0/grupo7-turma3-desafio-final.git', 
                    branch: 'main'
            }
        }

        stage('Clone App') {
            steps {
                // Get some code from a GitHub repository
                //sh 'rm -rf spring-web-youtube && git clone https://github.com/torneseumprogramador/spring-web-youtube.git'
                sh 'rm -rf app-code'
                sh 'mkdir app-code && cd app-code'
                dir ('app-code'){
                    git url: 'https://github.com/torneseumprogramador/spring-web-youtube.git', branch: 'deploy-docker'
                }
            }
        }

        stage('Build App') {
            steps {
                sh 'cd app-code && ./mvnw package -Dmaven.test.skip -DskipTests -Dmaven.javadoc.skip=true'
                echo 'Building..'
            }
        }

        stage('Test App') {
            steps {
                sh "export USER=root && export PASSWORD=${DB_PASSWORD} && export DATABASE_URL='mysql://${SQL_DEV}:3306/SpringWebYoutube?useTimezone=true&serverTimezone=UTC' && cd app-code && ./mvnw test"
                echo 'Testing....'
                //sh 'nohup ./start.sh &'
                //echo ' Starting....'
            }
        }

        stage('Create and Push Docker image') {
            steps {
                script {
                    VERSAO = sh(returnStdout: true, script: "git describe --tags \$(git rev-list --tags --max-count=1)")
                    sh "cd app-code && docker build -t ocontini/desafio-devops-gama:${VERSAO} -f Dockerfile . && docker push ocontini/desafio-devops-gama:${VERSAO}"
                    echo 'pushing docker image..'
                }
            }
        }

        stage('Deploy Dev') {
            steps {
                sh 'chmod +x 05-pipelineAPP/deployApp.sh'
                sh "05-pipelineAPP/deployApp.sh dev"
            }
        }

        stage('Deploy Stag') {
            steps {
                sh 'chmod +x 05-pipelineAPP/deployApp.sh'
                sh "05-pipelineAPP/deployApp.sh stage"
            }
        }

        stage('Deploy Prod') {
            steps {
                sh 'chmod +x 05-pipelineAPP/deployApp.sh'
                sh "05-pipelineAPP/deployApp.sh prod"
            }
        }
    }
}
